package com.morningstar.eapi.AnalysisResearch.CorporateAction;

import java.util.ArrayList;
import java.util.List;

import org.junit.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import com.morningstar.FundAutoTest.DateUtil;
import com.morningstar.FundAutoTest.commons.Common;
import com.morningstar.FundAutoTest.commons.ExcelUtil;
import com.morningstar.FundAutoTest.commons.ResourceManager;
import com.morningstar.FundAutoTest.commons.testbase.Base;
import com.morningstar.FundAutoTest.commons.testbase.TestConfigData;

public class Dividend extends Base{
	public static List<TestConfigData> testList = new ArrayList<TestConfigData>();
	Common common= new Common();
	CorporateActionBase corporateActionBase = new CorporateActionBase();
	String pattern = "MM/dd/yyyy";
	String timeZone = ResourceManager.getTimeZone();
	
	@BeforeClass
	public void load() throws Exception {
		testList = common.loadConfig("./config/AnalysisResearch/CorporateAction/Dividend.xml");
	}
	
	@Test(description = "Search good results having data by USD currency, different Start Date and End Date")
	public void testSearchGood() throws Exception
	{
		String currentDate = DateUtil.getCurrentDate(timeZone, pattern);
		Assert.assertTrue(corporateActionBase.compareDividend(null, "01/01/" + (Integer.parseInt(DateUtil.getCurrentYear(timeZone)) -1),  "01/01/" + (Integer.parseInt(DateUtil.getCurrentYear(timeZone)) + 2), true));
		Assert.assertTrue(corporateActionBase.compareDividend(null, DateUtil.getNYear(timeZone, -1, pattern),  DateUtil.getNYear(timeZone, 1, pattern), true));				
		Assert.assertTrue(corporateActionBase.compareDividend(null, currentDate,  currentDate, true));
		Assert.assertTrue(corporateActionBase.compareDividend(null, currentDate,  DateUtil.getNDay(timeZone, 7, pattern), true));
		Assert.assertTrue(corporateActionBase.compareDividend(null, DateUtil.getNDay(timeZone, -7, pattern), currentDate, true));		
	}
	
	@Test(description = "Search bad results having no data by USD currency, different Start Date and End Date")
	public void testSearchBad() throws Exception
	{
		Assert.assertTrue(corporateActionBase.compareDividend(null, DateUtil.getNYear(timeZone, 1, pattern), DateUtil.getNYear(timeZone, 2, pattern), false));
		Assert.assertTrue(corporateActionBase.compareDividend(null, DateUtil.getNYear(timeZone, -3, pattern), DateUtil.getNYear(timeZone, -2, pattern), false));
		Assert.assertTrue(corporateActionBase.compareDividend(null, "11/11/2013",  "11/10/2013", false));
		Assert.assertTrue(corporateActionBase.compareDividend(null, "1234", "2345", false));
		Assert.assertTrue(corporateActionBase.compareDividend(null, "*&sf", "$#23", false));		
	}
	
	@Test(description = "Search Results by 0P0000027N, 0P000001S5, for Special Dividend/Stock Dividend Data checking")
	public void testStockSpecialDividend() throws Exception
	{		
		List<List<String>> stockList = ExcelUtil.getCellData("./config/AnalysisResearch/CorporateAction/DividendSummarySpecial.xlsx", "Special", true);
		Assert.assertTrue(corporateActionBase.compareDividend(stockList, DateUtil.getNYear(timeZone, -1, pattern),  DateUtil.getNYear(timeZone, 1, pattern), true));
	}
	
}

package com.morningstar.FundTeam.ML;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;


import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import com.ibm.icu.text.SimpleDateFormat;
import com.morningstar.FundAutoTest.commons.CustomizedLog;
import com.morningstar.FundAutoTest.commons.DBCommons;
import com.morningstar.FundAutoTest.commons.DBFreshpool;
import com.morningstar.FundAutoTest.commons.Database;
import com.morningstar.FundAutoTest.commons.Helper;

public class StockPackageTest{

	/**
	 * @param args
	 */
	
	static SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
	public static String currenTime = df.format(new Date());
	
	public static String testLogPath = "./log/TestLog/MerrillLynch/ML-23/";
	public static String testLogNameCase1 = "completenessTestResult-" + currenTime + "." + "log";
	public static String testLogNameCase2 = "formatTestResult-" + currenTime + "." + "log";
	public static String testLogNameCase3 = "contentTestResult-" + currenTime + "." + "log";
	public static String testLogNameCase4 = "fileDuplicateDataTestResult-" + currenTime + "." + "log";
	
	public static String testLogNameCase5 = "NoCUSIP-" + currenTime + "." + "log";
	public static String testLogNameCase6 = "NoISIN-" + currenTime + "." + "log";
	public static String testLogNameCase7 = "NoExchangeId-" + currenTime + "." + "log";
	public static String testLogNameCase8 = "NoSymbol-" + currenTime + "." + "log";
	public static String testLogNameCase9 = "NoDomiceleOrCountryId-" + currenTime + "." + "log";
	public static String testLogNameCase10 = "NoPrimaryExchangeId-" + currenTime + "." + "log";
	
	public static String testLogTopic1 = "Stock Sample file for Merrill Lynch completeness testing";
	public static String testLogTopic2 = "Stock Sample file for Merrill Lynch format testing";
	public static String testLogTopic3 = "Stock Sample file for Merrill Lynch content verify testing";
	public static String testLogTopic4 = "Stock Sample file for Merrill Lynch duplicate data checking";
	public static String testLogTopic5 = "Stock Sample file for Merrill Lynch data checking";
	public static String StockfilePath = "E:/HJG_Project/ML_Project/StockDemoFile/20131217/Stock/Stock";
	
	
	@BeforeClass(description = "Testing preparing!")
	public static void testPrepare() throws IOException{
//生成自定义测试结果日志文件
//		CustomizedLog.creatCusomizedLogFile(testLogPath, testLogNameCase1, testLogTopic1);
//		CustomizedLog.creatCusomizedLogFile(testLogPath, testLogNameCase2, testLogTopic2);
		CustomizedLog.creatCusomizedLogFile(testLogPath, testLogNameCase3, testLogTopic3);
//		CustomizedLog.creatCusomizedLogFile(testLogPath, testLogNameCase4, testLogTopic4);
//		CustomizedLog.creatCusomizedLogFile(testLogPath, testLogNameCase5, testLogTopic5);
	}
	
	@Test(description = "Testing:Stock sample file completment testing!")
	public static void testStockFileComplete() throws Exception{
		String startTime = df.format(new Date());
		System.out.println("[TestForFormat]Begin to test at least only one Yield or Beta rate in each lines,please wait.......");
		System.out.println("[TestForFormat]Test at:" + startTime);
		CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "[TestForCompletment]Begin to test at least only one Yield or Beta rate in each lines,start at:" + startTime);
		int lineRange = Helper.getTotalLinesOfFile(StockfilePath);
		for(int lineNum = 2;lineNum < lineRange;lineNum++){
			String fileLineContent = Helper.readFileInLines(StockfilePath, lineNum);
			String[] element = fileLineContent.split("~",16);
			String fileYieldAsAtDate = element[8];
			String fileSecurityYieldRate = element[9];
			String fileBetaAsAtDate = element[10];
			String fileSecurityBetaRate = element[11];
//保证YieldRate与BetaRate必须至少存在一个值
			if(fileSecurityYieldRate.isEmpty() == true && fileSecurityBetaRate.isEmpty() == true){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase1, "Testing failed:[Case1]" + "Line number is:" + lineNum + "   " + "Both Yield and Beta Rate is empty!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase1, "Original Stock file is:" + fileLineContent);
			}
//若有YieldRate，则YieldAsAtDate必须不为空			
			if(fileSecurityYieldRate.isEmpty() == false){
				if(fileYieldAsAtDate.isEmpty() == true){
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase1, "Testing failed:[Case1]" + "Line number is:" + lineNum + "   " + "Yield data is NULL while Yield Rate isn't empty!");
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase1, "Original Stock file is:" + fileLineContent);
				}
			}
//若有BetaRate，则BetaAsAtDate必须不为空
			if(fileSecurityBetaRate.isEmpty() == false){
				if(fileBetaAsAtDate.isEmpty() == true){
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase1, "Testing failed:[Case1]" + "Line number is:" + lineNum + "   " + "Beta data is NULL while Beta Rate isn't empty!");
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase1, "Original Stock file is:" + fileLineContent);
				}
			}			
		}
		String endTime = df.format(new Date());
		CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase1, "[TestCase1]Test has finished,end at:" + endTime);
		System.out.println("[TestCase1]Test has finished,please check log file for results");
		System.out.println("End at:" + endTime);
	}
	@Test(description = "Testing:Stock sample file for Merrill Lynch data format/size verifying testing!")
	public static void testStockFileFormat() throws Exception{
//读取测试Stock Sample文件，按行遍历测试
		String startTime = df.format(new Date());
		System.out.println("[TestForFormat]Begin to test every data's size in each lines,please wait.......");
		System.out.println("[TestForFormat]Test at:" + startTime);
		CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "[TestForFormat]Begin to test every data's size in each lines,start at:" + startTime);																																												
		int lineRange = Helper.getTotalLinesOfFile(StockfilePath);
		for(int lineNum = 2;lineNum < lineRange-1;lineNum++){
			String fileLineContent = Helper.readFileInLines(StockfilePath, lineNum);
			String[] element = fileLineContent.split("~",16);
//File端数据准备
			String fileCUSIP = element[0];
			String fileSEDOL = element[1];
			String fileISIN = element[2];
			String fileExchangeId = element[3];
			String fileTickerSymbol = element[4];
			String fileDomicile = element[5];
			String filePrimaryExchangeId = element[6];
			String fileMorningstarSecurityId = element[7];
			String fileYieldAsAtDate = element[8];
			String fileSecurityYieldRate = element[9];
			String fileBetaAsAtDate = element[10];
			String fileSecurityBetaRate = element[11];
			String fileBetaBackfillIndexCode = element[14];
			String fileMorningstarBetaProxyName = element[15];
//新增需求：每行必须有15个"~"
			int columnNumberCount = Helper.getMatchCount("~",fileLineContent);
			if(columnNumberCount != 15){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "There aren't 15 '~' in this line!");
			}
			
//测试数据元素大小是否满足需求规定			
			if(fileCUSIP.length() != 0 && fileCUSIP.length() != 9 ){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "The size of CUSIP in stock file isn't 9 bytes!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Original Stock file is:" + fileLineContent);
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2,"Actual size of CUSIP in Stock file is:" + fileCUSIP.length());
			}			
			
			if(fileSEDOL.length() != 0 && fileSEDOL.length() != 7 ){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "The size of SEDOL in stock file isn't 7 bytes!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Original Stock file is:" + fileLineContent);
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2,"Actual size of SEDOL in Stock file is:" + fileSEDOL.length());
			}
			
			if(fileISIN.length() != 0 && fileISIN.length() != 12 ){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "The size of ISIN in stock file isn't 12 bytes!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Original Stock file is:" + fileLineContent);
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2,"Actual size of ISIN in Stock file is:" + fileISIN.length());
			}
			
			if(fileExchangeId.length() != 0 && fileExchangeId.length() !=10 ){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "The size of ExchangeId in stock file isn't 10 bytes!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Original Stock file is:" + fileLineContent);
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2,"Actual size of ExchangeId in Stock file is:" + fileExchangeId.length());
			}
			
			if(fileTickerSymbol.length() != 0 && fileTickerSymbol.length() > 20 ){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "The size of Primary Ticker Symbol in stock file isn't 20 bytes!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Original Stock file is:" + fileLineContent);
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2,"Actual size of Symbol in Stock file is:" + fileTickerSymbol.length());
			}
			
			if(fileDomicile.length() != 0 && fileDomicile.length() != 10 ){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "The size of Domicile in stock file isn't 10 bytes!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Original Stock file is:" + fileLineContent);
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2,"Actual size of Domicile in Stock file is:" + fileDomicile.length());
			}
			
			if(filePrimaryExchangeId.length() != 0 && filePrimaryExchangeId.length() != 10 ){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "The size of Primary Exchange Id in stock file isn't 10 bytes!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Original Stock file is:" + fileLineContent);
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2,"Actual size of Primary ExchangeId in Stock file is:" + filePrimaryExchangeId.length());
			}
			
			if(fileMorningstarSecurityId.length() != 0 && fileMorningstarSecurityId.length() != 10 ){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "The size of Morningstar Security in stock file isn't 10 bytes!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Original Stock file is:" + fileLineContent);
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2,"Actual size of InvestmentId in Stock file is:" + fileMorningstarSecurityId.length());
			}
			
			if(fileYieldAsAtDate.length() != 0 && fileYieldAsAtDate.length() != 8 ){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "The size of Yield As At date in stock file isn't 8 bytes!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Original Stock file is:" + fileLineContent);
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2,"Actual size of Yield As At Date in Stock file is:" + fileYieldAsAtDate.length());
			}
			
//精度为（9,5）
			if(fileSecurityYieldRate.length() != 0 && Helper.isDecimal(fileSecurityYieldRate) == true && Helper.getDecimalScale(fileSecurityYieldRate) != 5 ){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "The decimal scale of Security Yield Rate in stock file isn't 6 bytes!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Original Stock file is:" + fileLineContent);
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2,"Actual size of Security Yield Rate's decimal in Stock file is:" + Helper.getDecimalScale(fileSecurityYieldRate));
			}
			
			if(fileBetaAsAtDate.length() != 0 && fileBetaAsAtDate.length() != 8 ){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "The size of Beta As At date in stock file isn't 8 bytes!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Original Stock file is:" + fileLineContent);
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2,"Actual size of Beta As At Date in Stock file is:" + fileBetaAsAtDate.length());
			}
			
//精度为（9,3）			
			if(fileSecurityBetaRate.length() != 0 && Helper.isDecimal(fileSecurityBetaRate) == true && Helper.getDecimalScale(fileSecurityBetaRate) != 3 ){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "The decimal scale of Security Beta Rate in stock file isn't 3 bytes!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Original Stock file is:" + fileLineContent);
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2,"Actual size of Security Beta Rate's decimal in Stock file is:" + Helper.getDecimalScale(fileSecurityBetaRate));
			}
					
			if(fileBetaBackfillIndexCode.length() != 0 && fileBetaBackfillIndexCode.length() != 10 ){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "The size of Beta Backfill Index Code in stock file isn't 10 bytes!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Original Stock file is:" + fileLineContent);
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2,"Actual size of Beta Backfill Index Code in Stock file is:" + fileBetaBackfillIndexCode.length());
			}
			if(fileMorningstarBetaProxyName.length() != 0 && fileMorningstarBetaProxyName.length() > 40 ){
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Testing failed:[Case2]" + "Line number is:" + lineNum + "   " + "The size of Morningstar Beta Proxy Name in stock file isn't 40 bytes!");
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "Original Stock file is:" + fileLineContent);
				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2,"Actual size of Morningstar Beta Proxy Name in Stock file is:" + fileMorningstarBetaProxyName.length());
			}
		}
		String endTime = df.format(new Date());
		CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase2, "[TestCase2]Test has finished,end at:" + endTime);
		System.out.println("[TestCase2]Test has finished,please check log file for results");
		System.out.println("End at:" + endTime);
	}

//content test	
	@Test(description = "Testing:Stock sample file")
	public static void testStockFileContent() throws Exception{
		//读取测试Fund Sample文件，按行遍历测试
		String startTime = df.format(new Date());
		HashMap<String,String> perfId2CUSIP = new HashMap<String,String>();
		HashMap<String,String> perfId2SEDOL = new HashMap<String,String>();
		HashMap<String,String> perfId2ISIN = new HashMap<String,String>();
		HashMap<String,String> perfId2ExchangeId = new HashMap<String,String>();
		HashMap<String,String> perfId2Symbol = new HashMap<String,String>();
		HashMap<String,String> perfId2CompanyId = new HashMap<String,String>();
		HashMap<String,String> perfId2InvestmentId = new HashMap<String,String>();
		HashMap<String,String> perfId2YieldAsAtDate = new HashMap<String,String>();
		HashMap<String,String> perfId2SecurityYieldRate = new HashMap<String,String>();
		HashMap<String,String> perfId2BetaAsAtDate = new HashMap<String,String>();
		HashMap<String,String> perfId2BetaRate = new HashMap<String,String>();
		HashMap<String,String> perfId2ProxyId = new HashMap<String,String>();
		
		System.out.println("[TestForContent]Begin to test every data's contents in each lines,please wait.......");																																												
		System.out.println("Test at:" + startTime);
		CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "[TestForContent]Begin to test every data's contents in each lines,start at:" + startTime);
		int lineRange = Helper.getTotalLinesOfFile(StockfilePath);
//获取Stock Sample File中的所有PerformanceId的组合
		String performanceIdBuild = buildPerformanceId(7);
//		System.out.println(performanceIdBuild);
//DB端数据准备		
		String sqlToGetCUSIP = "SELECT PerformanceId,CUSIP FROM dbo.PerformanceIdDimension WHERE PerformanceId IN (" + performanceIdBuild + ")";
		CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "SQL语句： " + sqlToGetCUSIP);
		String sqlToGetSEDOL = "SELECT PerformanceId,SEDOL FROM dbo.PerformanceIdDimension WHERE PerformanceId IN (" + performanceIdBuild + ")";
		String sqlToGetISIN  = "SELECT PerformanceId,ISIN FROM dbo.PerformanceIdDimension WHERE PerformanceId IN (" + performanceIdBuild + ")";
		String sqlToGetExchangeId = "SELECT PerformanceId,ExchangeId FROM dbo.PerformanceIdDimension WHERE PerformanceId IN (" + performanceIdBuild + ")";
		String sqlToGetTickerSymbol = "SELECT PerformanceId,Symbol FROM dbo.PerformanceIdDimension WHERE PerformanceId IN (" + performanceIdBuild + ")";
		String sqlToGetCompanyId = "SELECT PerformanceId,CompanyId FROM dbo.PerformanceIdDimension WHERE PerformanceId IN (" + performanceIdBuild + ")";
		String sqlToGetInvestmenId = "SELECT PerformanceId,InvestmentId FROM dbo.PerformanceIdDimension WHERE PerformanceId IN (" + performanceIdBuild + ")";

//File端数据准备
		String fileCUSIP = null;
		String fileSEDOL = null;
		String fileISIN = null;
		String fileExchangeId = null;
		String fileTickerSymbol = null;
//		String fileDomicile = null;				
//		String filePrimaryExchangeId = null;
		String fileMorningstarSecurityId = null;
		String fileYieldAsAtDate = null;
		String fileSecurityYieldRate = null;
		String fileBetaAsAtDate = null;
		String fileSecurityBetaRate = null;
		String fileBetaBackfillIndexCode = null;
		String fileMorningstarBetaProxyName = null;
		
		
//SQL SERVER对脚本的长度有限制，所以在此采取批量运行的方式
		List<String> containList = new ArrayList<String>();
		containList = buildPerformanceIdBuffer(7,10);
				
//只有Equity有
//			String sqlToGetPrimaryExchangeId = "";
//			String sqlToGetMorningstarSecurityId = "SELECT InvestmentId FROM dbo.PerformanceIdDimension WHERE PerformanceId = " + "'" + PerfId.get(0) + "'";
//		String sqlToGetYieldAsAtDate = "SELECT EndDate FROM dbo.MLAverage3MonthYieldForMonthEnd WHERE PerformanceId = ?";

		perfId2CUSIP = DBCommons.getDataHashMap(sqlToGetCUSIP, Database.Vertica1);
		if(perfId2CUSIP.isEmpty()==false){
			System.out.println("MAP:perfId2CUSIP已从DB中导入完成！");
		}
		perfId2SEDOL = DBCommons.getDataHashMap(sqlToGetSEDOL, Database.Vertica1);
		if(perfId2SEDOL.isEmpty()==false){
			System.out.println("MAP:perfId2SEDOL已从DB中导入完成！");
		}
		perfId2ISIN = DBCommons.getDataHashMap(sqlToGetISIN, Database.Vertica1);
		if(perfId2ISIN.isEmpty()==false){
			System.out.println("MAP:perfId2ISIN已从DB中导入完成！");
		}
		perfId2ExchangeId = DBCommons.getDataHashMap(sqlToGetExchangeId, Database.Vertica1);
		if(perfId2ExchangeId.isEmpty()==false){
			System.out.println("MAP:perfId2ExchangeId已从DB中导入完成！");
		}
		perfId2Symbol = DBCommons.getDataHashMap(sqlToGetTickerSymbol, Database.Vertica1);
		if(perfId2Symbol.isEmpty()==false){
			System.out.println("MAP:perfId2Symbol已从DB中导入完成！");
		}
		perfId2CompanyId = DBCommons.getDataHashMap(sqlToGetCompanyId, Database.Vertica1);
		if(perfId2CompanyId.isEmpty()==false){
			System.out.println("MAP:perfId2CompanyId已从DB中导入完成！");
		}
		perfId2InvestmentId = DBCommons.getDataHashMap(sqlToGetInvestmenId, Database.Vertica1);
		if(perfId2InvestmentId.isEmpty()==false){
			System.out.println("MAP:perfId2CompanyId已从DB中导入完成！");
		}
		
		String fileContent = null;
		String[] element = null;
		for(int lineNum = 2;lineNum < 3;lineNum++){
			try{
				fileContent = Helper.readFileInLines(StockfilePath, lineNum);
				element = fileContent.split("~",16);
//File端数据准备
				fileCUSIP = element[0];
				fileSEDOL = element[1];
				fileISIN = element[2];
				fileExchangeId = element[3];
				fileTickerSymbol = element[4];
//				fileDomicile = element[5];				
//				filePrimaryExchangeId = element[6];
				fileMorningstarSecurityId = element[7];
				fileYieldAsAtDate = element[8];
				fileSecurityYieldRate = element[9];
				fileBetaAsAtDate = element[10];
				fileSecurityBetaRate = element[11];
				fileBetaBackfillIndexCode = element[14];
				fileMorningstarBetaProxyName = element[15];
//测试file中的每一个数据的准确性
	
//测试CUSIP
				String actCUSIPInDb = perfId2CUSIP.get(fileMorningstarSecurityId);
				if(actCUSIPInDb.equalsIgnoreCase(fileCUSIP) == false){
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Testing failed:[Case3]" + "Line number is:" + lineNum + "   " + "CUSIP not mapping!");
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Original Fund file is:" + fileContent);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual CUSIP in DB is:" + actCUSIPInDb);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual CUSIP in FundFile is:" + fileCUSIP);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "==============================================");
				}
//测试SEDOL
				String actSEDOLInDb = perfId2SEDOL.get(fileMorningstarSecurityId);
				System.out.println("fileSEDOL: "+fileSEDOL);
				System.out.println("actSEDOLInDb: " +actSEDOLInDb);
				if(actSEDOLInDb.equalsIgnoreCase(fileSEDOL) == false){
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Testing failed:[Case3]" + "Line number is:" + lineNum + "   " + "SEDOL not mapping!");
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Original Fund file is:" + fileContent);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual SEDOL in DB is:" + actSEDOLInDb);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual SEDOL in FundFile is:" + fileSEDOL);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "==============================================");
				}
//测试ISIN
				String actISINInDb = perfId2ISIN.get(fileMorningstarSecurityId);
				System.out.println("fileISIN: "+fileISIN);
				System.out.println("actISINInDb: "+actISINInDb);
				if(actISINInDb.equalsIgnoreCase(fileISIN) == false ){
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Testing failed:[Case3]" + "Line number is:" + lineNum + "   " + "ISIN not mapping!");
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Original Fund file is:" + fileContent);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual ISIN in DB is:" + actISINInDb);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual ISIN in FundFile is:" + fileISIN);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "==============================================");
				}
				
//测试ExchangeId
				String actExchangeIdInDb = perfId2ExchangeId.get(fileMorningstarSecurityId);
				System.out.println("fileExchangeId: "+fileExchangeId);
				System.out.println(actExchangeIdInDb);
				if(actExchangeIdInDb.equals(fileExchangeId) == false ){
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Testing failed:[Case3]" + "Line number is:" + lineNum + "   " + "ExchangeId not mapping!");
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Original Fund file is:" + fileContent);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual ExchangeId in DB is:" + actExchangeIdInDb);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual ExchangeId in FundFile is:" + fileExchangeId);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "==============================================");		
				}
//测试Symbol
				String actTicherSymbolInDb = perfId2Symbol.get(fileMorningstarSecurityId);
				System.out.println("fileTickerSymbol: "+fileTickerSymbol);
				System.out.println("actTicherSymbolInDb: "+actTicherSymbolInDb);
				if(actTicherSymbolInDb.equalsIgnoreCase(fileTickerSymbol) == false ){
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Testing failed:[Case3]" + "Line number is:" + lineNum + "   " + "Symbol not mapping!");
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Original Fund file is:" + fileContent);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual Symbol in DB is:" + actTicherSymbolInDb);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual Symbol in FundFile is:" + fileTickerSymbol);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "==============================================");					
				}
//测试Domicile/Country of Business Id
	//1.	Use performanceId to get CompanyId from dbo.PerformanceIdDimension.
	//2.	Use CompanyId from dbo.CompanyIdDimension to get CountryId
	//			String companyId = perfId2CompanyId.get(fileMorningstarSecurityId);			
	//			String sqlToGetDomicile = "SELECT CountryId FROM CurrentData.dbo.CompanyIdDimension WHERE CompanyId = '" + companyId + "'"; 
	//			String actDomicile = DBCommons.getData(sqlToGetDomicile, Database.MsSQL1);
	//			System.out.println("开始测试Domicile");
	//			if(actDomicile.equalsIgnoreCase(fileDomicile) == false ){
	//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Testing failed:[Case3]" + "Line number is:" + lineNum + "   " + "Domicile not mapping!");
	//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Original Fund file is:" + fileContent);
	//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual Domicile in DB is:" + actDomicile);
	//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual Domicile in FundFile is:" + fileDomicile);
	//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "==============================================");					
	//			}
	//测试Primary Exchange Id		
	//1.	Use performanceId to get InvestmentId from dbo.PerformanceIdDimension.
	//2.	Use InvestmentId to get exchangeId from dbi.PerformanceSearch
	//			String investmentId = perfId2InvestmentId.get(fileMorningstarSecurityId);
	//			String sqlToGetPrimaryExchangeId = "SELECT ExchangeId FROM dbi.PerformanceSearch WHERE IsPrimary = '1' AND Status = '1' AND investmentId = '" + investmentId + "'";
	//			String actPrimaryExchangeId = DBCommons.getData(sqlToGetPrimaryExchangeId, Database.MsSQL1);
	//			System.out.println("开始测试Primary Exchange Id");
	//			if(actPrimaryExchangeId.equalsIgnoreCase(filePrimaryExchangeId) == false){
	//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Testing failed:[Case3]" + "Line number is:" + lineNum + "   " + "Domicile not mapping!");
	//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Original Fund file is:" + fileContent);
	//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual Domicile in DB is:" + actDomicile);
	//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual Domicile in FundFile is:" + fileDomicile);
	//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "==============================================");										
	//			}
//测试Yield As At Date
				HashMap<String,String> perfId2YieldAsAtDateContainer = new HashMap<String,String>(); 
				for(String bufferPerformanceIdBuild : containList){
					String sqlToGetYieldAsAtDate = "SELECT PerformanceId,EndDate FROM CurrentData.dbo.MLAverage3MonthYieldForMonthEnd WHERE MLUniverseType = '2' AND PerformanceId IN (" + bufferPerformanceIdBuild + ")";
					System.out.println("SQL语句: "+sqlToGetYieldAsAtDate);
					perfId2YieldAsAtDate = DBCommons.getDataHashMap(sqlToGetYieldAsAtDate, Database.MsSQL1);
					perfId2YieldAsAtDateContainer.putAll(perfId2YieldAsAtDate);
				}
				String actYieldAsAtDateInDb = perfId2YieldAsAtDate.get(fileMorningstarSecurityId);
				System.out.println("actYieldAsAtDateInDb: "+actYieldAsAtDateInDb);
				if(actYieldAsAtDateInDb.equalsIgnoreCase(fileYieldAsAtDate) == false ){
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Testing failed:[Case3]" + "Line number is:" + lineNum + "   " + "Yield As At Date not mapping!");
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Original Fund file is:" + fileContent);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual Yield As At Date in DB is:" + actYieldAsAtDateInDb);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual Yield As At Date in FundFile is:" + fileYieldAsAtDate);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "==============================================");										
				}
//测试Security Yield Rate
				HashMap<String,String> perfId2SecurityYieldRateContainer = new HashMap<String,String>();	
				for(String bufferPerformanceIdBuild : containList){
					String sqlToGetYieldRate = "SELECT PerformanceId,Average3MonthYield FROM dbo.MLAverage3MonthYieldForMonthEnd WHERE MLUniverseType = '2' AND PerformanceId IN (" + bufferPerformanceIdBuild + ")";
					perfId2SecurityYieldRate = DBCommons.getDataHashMap(sqlToGetYieldRate, Database.MsSQL1);
					perfId2SecurityYieldRateContainer.putAll(perfId2SecurityYieldRate);
				}
				String actYieldRate = perfId2SecurityYieldRateContainer.get(fileMorningstarSecurityId);
				if(actYieldRate.equalsIgnoreCase(fileSecurityYieldRate) == false){
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Testing failed:[Case3]" + "Line number is:" + lineNum + "   " + "Security Yield Rate not mapping!");
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Original Fund file is:" + fileContent);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual Security Yield Rate in DB is:" + actYieldRate);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual Security Yield Rate in FundFile is:" + fileSecurityYieldRate);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "==============================================");											
				}
//测试Beta As At Date
				HashMap<String,String> perfId2BetaAsAtDateContainer = new HashMap<String,String>(); 
				for(String bufferPerformanceIdBuild : containList){
					String sqlToGetBetaAsAtDate = "SELECT PerformanceId,EndDate FROM dbo.ML3YearBetaForMonthEnd WHERE MLUniverseType = '2' AND PerformanceId IN (" + bufferPerformanceIdBuild + ")";
					perfId2BetaAsAtDate = DBCommons.getDataHashMap(sqlToGetBetaAsAtDate, Database.MsSQL1);
					perfId2BetaAsAtDateContainer.putAll(perfId2BetaAsAtDate);
				}
				String actBetaAsAtDate = perfId2BetaAsAtDateContainer.get(fileMorningstarSecurityId);
				if(actBetaAsAtDate.equalsIgnoreCase(fileBetaAsAtDate) == false){
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Testing failed:[Case3]" + "Line number is:" + lineNum + "   " + "Beta As At Date not mapping!");
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Original Fund file is:" + fileContent);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual Beta As At Date in DB is:" + actBetaAsAtDate);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Actual Beta As At Date in FundFile is:" + fileBetaAsAtDate);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "==============================================");											
				}
//测试Beta Rate
				HashMap<String,String> perfId2BetaRateContainer = new HashMap<String,String>();
				for(String bufferPerformanceIdBuild : containList){
					String sqlToGetBetaRate = "SELECT PerformanceId,Beta FROM dbo.ML3YearBetaForMonthEnd WHERE MLUniverseType = '2' AND PerformanceId IN (" + bufferPerformanceIdBuild + ")";
					perfId2BetaRate = DBCommons.getDataHashMap(sqlToGetBetaRate, Database.MsSQL1);
					perfId2BetaRateContainer.putAll(perfId2BetaRate);
				}
				String actBetaRate = perfId2BetaRateContainer.get(fileMorningstarSecurityId);
				if(actBetaRate.equalsIgnoreCase(fileSecurityBetaRate) == false){
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Testing failed:[Case3]" + "Line number is:" + lineNum + "   " + "Beta Rate not mapping!");
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Original Fund file is:" + fileContent);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Beta Rate in DB is:" + actBetaRate);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Beta Rate in FundFile is:" + fileSecurityBetaRate);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "==============================================");											
				}
//测试Beta Backfill Index Code
				HashMap<String,String> perfId2ProxyIdContainer = new HashMap<String,String>();
				for(String bufferPerformanceIdBuild : containList){
					String sqlToGetProxyId = "SELECT PerformanceId,ProxyId FROM dbo.ML3YearBetaForMonthEnd WHERE MLUniverseType = '2' AND PerformanceId IN (" + bufferPerformanceIdBuild + ")";
					perfId2ProxyId = DBCommons.getDataHashMap(sqlToGetProxyId, Database.MsSQL1);
					perfId2ProxyIdContainer.putAll(perfId2ProxyId);
				}	
				String actProxyId = perfId2ProxyIdContainer.get(fileMorningstarSecurityId);
				if(actProxyId.equalsIgnoreCase(fileBetaBackfillIndexCode) == false){
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Testing failed:[Case3]" + "Line number is:" + lineNum + "   " + "Beta Backfill Index Code not mapping!");
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Original Fund file is:" + fileContent);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Beta Backfill Index Code in DB is:" + actProxyId);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Beta Backfill Index Code in FundFile is:" + fileBetaBackfillIndexCode);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "==============================================");											
				}
//测试Morningstar Beta Proxy Name
//get it via ProxyId
							List<String> proxyIdList = new ArrayList<String>();
							HashMap<String,String> perfId2ProxyIdMap = new HashMap<String,String>();
							proxyIdList = loadAssignDataToList(14);
							String buildProxyId = buildPerformanceId(14);
							String sqlToGetProxyName = "SELECT ProxyId,InvestmentName FROM dbo.InvestmentIdDimension WHERE ProxyId IN(" + buildProxyId + ")";
							perfId2ProxyIdMap = DBCommons.getDataHashMap(sqlToGetProxyName, Database.Vertica1);
							for(String proxyId : proxyIdList){
								String actInvestmentName = perfId2ProxyIdMap.get(proxyId);
								if(actInvestmentName.equalsIgnoreCase(fileMorningstarBetaProxyName) == false){
									CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Testing failed:[Case3]" + "Line number is:" + lineNum + "   " + "Morningstar Beta Proxy Name not mapping!");
									CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Original Fund file is:" + fileContent);
									CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Morningstar Beta Proxy Name in DB is:" + actInvestmentName);
									CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "Morningstar Beta Proxy Name in FundFile is:" + fileMorningstarBetaProxyName);
									CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase3, "==============================================");											
								}
							}
			}catch(Exception ex){
				ex.printStackTrace();
			}	
		}
//关闭之前所有的数据库连接		
		DBFreshpool.closeConnection();
	}
//duplicate test
		@Test(description = "Testing:Stock sample file for Merrill Lynch data duplicate testing!")
		public static void testStockFileDuplicateData() throws Exception{
			String startTime1 = df.format(new Date());
			System.out.println("[TestForDuplicateData]Begin to test no duplicate lines in Stock sample file,please wait.......");
			System.out.println("[TestForDuplicateData]Test at:" + startTime1);
			CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "[TestForDuplicateData]Begin to test no duplicate lines in Stock sample file,start at:" + startTime1);
			
			List<String> listFullDuplicateDataContainer = new ArrayList<String>();
			List<String> listDuplicateDatawithNoSedolContainer = new ArrayList<String>();
			List<String> listSecIdContainer = new ArrayList<String>();
			List<String> listSedolContainer = new ArrayList<String>();
			List<String> listCusipContainer = new ArrayList<String>();
			List<String> listIsinContainer = new ArrayList<String>();
			listFullDuplicateDataContainer = loadLineDataToList();
			listDuplicateDatawithNoSedolContainer = loadDataToListNoSedol();
			listSecIdContainer = loadAssignDataToList(7);
			listSedolContainer = loadAssignDataToList(1);
			listCusipContainer = loadAssignDataToList(0);
			listIsinContainer = loadAssignDataToList(2);
			int lineRange = Helper.getTotalLinesOfFile(StockfilePath);
			
			for(int lineNum = 2;lineNum < lineRange;lineNum++){
				String fileContent = Helper.readFileInLines(StockfilePath, lineNum);
				int lineDuplicateCount = Collections.frequency(listFullDuplicateDataContainer, fileContent);
				if(lineDuplicateCount > 1){
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Testing failed:[Case1]Duplicate lines number is:" + lineDuplicateCount);
					CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Failed line number is:" + lineNum + "\t" + "\nFailed original content is:" + fileContent);				
				}
			}
	//释放listFullDuplicateDataContainer的内存空间
			if(listFullDuplicateDataContainer.isEmpty() == false){
				listFullDuplicateDataContainer.removeAll(listFullDuplicateDataContainer);
				System.out.println("[Notice]The listFullDuplicateDataContainer has been removed!");
			}
		
			String startTime2 = df.format(new Date());
			System.out.println("[TestForDuplicateData]Begin to test Sedol rules if Stock sample file has duplicate datas beside Sedol,please wait.......");
			System.out.println("[TestForDuplicateData]Test at:" + startTime2);
			CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "[TestForDuplicateData]Begin to test Sedol rules if Stock sample file has duplicate datas beside Sedol,start at:" + startTime2);
			
			for(int lineNum = 2;lineNum < lineRange;lineNum++){
				String fileLineContent = Helper.readFileInLines(StockfilePath, lineNum);
	//去除每行的SEDOL和SecId(保证索引值不包含1的就可以了)
				String[] element = fileLineContent.split("~",16);
				String fileSedol = element[1];
				String fileRealLineContent = element[0]+element[2]+element[3]+element[4]+element[5]+element[6]+element[7]+element[8]+element[9]+element[10]+element[11]+element[12]+element[13]+element[14]+element[15];
				int lineDuplicateCountWithNoSedol = Collections.frequency(listDuplicateDatawithNoSedolContainer,fileRealLineContent);
	//不包含Sedol的其余数据相同则开始判断测试结果
				if(lineDuplicateCountWithNoSedol > 1){								
	//检查当前行的Sedol是否有重复的,若Sedol唯一，则测试失败
					int duplicateSedolCount = Collections.frequency(listSedolContainer, fileSedol);
					if(duplicateSedolCount > 1){
						CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Testing failed:[Case2]Having same SEDOL while other column datas is same beside SecId,line number is:" + lineNum);
						CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Invalid SEDOL is:" + fileSedol + "\nFailed original content is:" + fileLineContent);							
					}
				}
			}
	//释放listDuplicateDatawithNoSedolContainer的内存空间
			if(listDuplicateDatawithNoSedolContainer.isEmpty() == false){
				listDuplicateDatawithNoSedolContainer.removeAll(listDuplicateDatawithNoSedolContainer);
				System.out.println("[Notice]The listDuplicateDatawithNoSedolContainer has been removed!");
			}
			
			String startTime3 = df.format(new Date());
			System.out.println("[TestForDuplicateData]Begin to test one SecId only map to one SEDOL/ISIN/CUSIP,please wait.......");
			System.out.println("[TestForDuplicateData]Test at:" + startTime3);
			CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "[TestForDuplicateData]Begin to test one SecId only map to one SEDOL/ISIN/CUSIP,start at:" + startTime3);
			for(int lineNum = 2;lineNum < lineRange;lineNum++){
				String fileLineContent = Helper.readFileInLines(StockfilePath, lineNum);
				String[] ele = fileLineContent.split("~", 16);
				String fileCUSIP = ele[0];
				String fileISIN = ele[2];
				String fileSEDOL = ele[1];
				String fileSecId = ele[7];
				int duplicateSecId = Collections.frequency(listSecIdContainer,fileSecId);
				int duplicateSedolCount = Collections.frequency(listSedolContainer, fileSEDOL);			
				int duplicateCUSIP = Collections.frequency(listCusipContainer, fileCUSIP);
				int duplicateISIN = Collections.frequency(listIsinContainer, fileISIN);

				
	//当SEDOL唯一时			
				if(duplicateSedolCount == 1){				
	//对应的SecId也必须唯一				
					if(duplicateSecId > 1){
						CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Testing failed:[Case3]Mapping SecId isn't single while SEDOL has only one record,line number is:" + lineNum);
						CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Invalid SecId is:" + fileSecId + "\tMapping SEDOL is:" +fileSEDOL + "\nFailed original content is:" + fileLineContent);
					}
				}
	//当SEDOL不唯一时，对应的SecId数目必须和SEDOL数目相等
				if(fileSEDOL.isEmpty() == false && duplicateSedolCount > 1){
					if(duplicateSecId != duplicateSedolCount){
						CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Testing failed:[Case3]The count of mapping SecId isn't the same with SEDOL,line number is:" + lineNum);
						CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Invalid SecId is:" + fileSecId + "\tMapping SEDOL is:" +fileSEDOL + "\nFailed original content is:" + fileLineContent);				
					}
				}
	//当CUSIP唯一时
				if(duplicateCUSIP == 1){
	//对应的SecId也必须唯一
					if(duplicateSecId > 1){
						CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Testing failed:[Case3]Mapping SecId isn't single while CUSIP has only one record,line number is:" + lineNum);
						CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Invalid SecId is:" + fileSecId + "\tMapping CUSIP is:" +fileCUSIP + "\nFailed original content is:" + fileLineContent);				
					}
				}
	//当CUSIP不唯一时
				if(fileCUSIP.isEmpty() == false && duplicateCUSIP >1){
	//对应的SecId数目必须与CUSIP数目相等
					if(duplicateCUSIP != duplicateSecId){
						CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Testing failed:[Case3]The count of mapping SecId isn't the same with CUSIP,line number is:" + lineNum);
						CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Invalid SecId is:" + fileSecId + "\tMapping CUSIP is:" +fileCUSIP + "\nFailed original content is:" + fileLineContent);				
					}
	//当ISIN唯一时
				if(duplicateISIN == 1){
	//对应的SecId也必须唯一				
					if(duplicateSecId > 1){
						CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Testing failed:[Case3]Mapping SecId isn't single while ISIN has only one record,line number is:" + lineNum);
						CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Invalid SecId is:" + fileSecId + "\tMapping ISIN is:" +fileISIN + "\nFailed original content is:" + fileLineContent);				
					}
	//当ISIN不唯一时
				if(fileISIN.isEmpty() == false && duplicateISIN >1){
	//对应的SecId数目必须与ISIN数目相等
					if(duplicateISIN != duplicateSecId){
						CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Testing failed:[Case3]The count of mapping SecId isn't the same with ISIN,line number is:" + lineNum);
						CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "Invalid SecId is:" + fileSecId + "\tMapping ISIN is:" +fileISIN + "\nFailed original content is:" + fileLineContent);				
					}				
				}
			}
	//释放listSecIdContainer，listSedolContainer，listCusipContainer，listIsinContainer
				if(listSecIdContainer.isEmpty() == false){
					listSecIdContainer.removeAll(listSecIdContainer);
					System.out.println("[Notice]The listSecIdContainer has been removed!");
				}
				if(listSedolContainer.isEmpty() == false){
					listSedolContainer.removeAll(listSedolContainer);
					System.out.println("[Notice]The listSedolContainer has been removed!");
				}
				if(listCusipContainer.isEmpty() == false){
					listCusipContainer.removeAll(listCusipContainer);
					System.out.println("[Notice]The listCusipContainer has been removed!");
				}
				if(listIsinContainer.isEmpty() == false){
					listIsinContainer.removeAll(listIsinContainer);
					System.out.println("[Notice]The listIsinContainer has been removed!");
				}
		   }
	    }			
			String endTime = df.format(new Date());
			System.out.println("[TestCase4]Test has finished,please check log file for results");
			System.out.println("End at:" + endTime);
			CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase4, "[TestCase4]Test has finished,please check log file for results,end at:" + endTime);	
		}
//将每行数据LOAD到List中	
		public static List<String> loadLineDataToList() throws Exception{
			List<String> list = new ArrayList<String>();
			int lineNum = Helper.getTotalLinesOfFile(StockfilePath);
			for(int i = 2;i < lineNum; i++){
				String fileLineContent =Helper.readFileInLines(StockfilePath, i);
				list.add(fileLineContent);
			}
			return list;
		}
		
//将除了SEDOL和SecId的数据LOAD到List中
	private static List<String> loadDataToListNoSedol() throws Exception{
		List<String> list = new ArrayList<String>();
		int lineNum = Helper.getTotalLinesOfFile(StockfilePath);
		for(int i = 2;i < lineNum; i++){
			String fileLineContent =Helper.readFileInLines(StockfilePath, i);
//去除每行的SEDOL(保证索引值不包含1的就可以了)
			String[] element = fileLineContent.split("~",16);
			String fileRealLineContent = element[0]+element[2]+element[3]+element[4]+element[5]+element[6]+element[7]+element[8]+element[9]+element[10]+element[11]+element[12]+element[13]+element[14]+element[15];
			list.add(fileRealLineContent);
		}
		return list;
	}
	
//将指定列数据Load到一个List中
	private static List<String> loadAssignDataToList(int columnNum) throws Exception{
		List<String> list = new ArrayList<String>();
		int lineNum = Helper.getTotalLinesOfFile(StockfilePath);
		for(int i = 2;i < lineNum; i++){
			String fileLineContent =Helper.readFileInLines(StockfilePath, i);
			String[] element = fileLineContent.split("~",16);
			String str = element[columnNum];
			list.add(str);
			
		}
		return list;
	}	
	
//将指定列数据Load到一个List中(增加规则)
		private static String buildPerformanceId(int columnNum) throws Exception{
			StringBuilder sb = new StringBuilder();
			int lineNum = Helper.getTotalLinesOfFile(StockfilePath);
			for(int i = 2;i < lineNum; i++){
				String fileLineContent =Helper.readFileInLines(StockfilePath, i);
				String[] element = fileLineContent.split("~",16);
				String str = element[columnNum];
				sb.append("'"+str+"',");
				if(i == lineNum-1){
					sb.append("'"+str+"'");
				}				
			}
			return sb.toString();
		}
		
//将指定列数据Load到一个List中(增加规则)
		private static List<String> buildPerformanceIdBuffer(int columnNum,int bufferSize) throws Exception{
			List<String> list = new ArrayList<String>();
			List<String> perfIdList = new ArrayList<String>();
			perfIdList = loadAssignDataToList(columnNum);
			
			int flag = 0;
			String rebuildStr = "";
			for(String perfId : perfIdList){
				flag++;
				if(flag%bufferSize != 0){
					if(flag == bufferSize-1){
						rebuildStr += "'" + perfId + "'";
					}
					else{
						rebuildStr += "'" + perfId + "',";
					}
				}
				else{
					list.add(rebuildStr);
					flag=0;
					rebuildStr = "'" + perfId + "',";
				}
			}
			return list;
		}
	
	public static void test() throws SQLException, Exception {
//		String testSQL = "SELECT * FROM dbo.ML3YearBetaForMonthEnd WHERE MLUniverseType = '1'";
//		List<String> list = DBCommons.getDataList(testSQL, Database.MsSQL1);
//		for(int i =0;i< list.size();i++){
//			System.out.println(list.get(i));
//		}
		
		
		System.out.println("Test Begins!!!");
		int fileRange = Helper.getTotalLinesOfFile(StockfilePath);
		for(int lineNum = 2;lineNum < fileRange;lineNum++){
			String fileLineContent = Helper.readFileInLines(StockfilePath, lineNum);
			String[] element = fileLineContent.split("~",16);
			String fileCUSIP = element[0];
			String fileISIN = element[2];
			String fileExchangeId = element[3];
			String fileTickerSymbol = element[4];
			String fileDomiceleOrCountryId = element[5];
			String filePrimaryExchangeId = element[6];
			String filePerformanceId = element[7];
//			if(fileCUSIP.isEmpty() == true){
//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase5, "No CUSIP  ，PerformanceId is: " + filePerformanceId);
//			}
//			if(fileISIN.isEmpty() == true){
//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase6, "No ISIN ，PerformanceId is: " + filePerformanceId);
//			}
//			if(fileExchangeId.isEmpty() == true){
//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase7, "No ExchangeId ，PerformanceId is: " + filePerformanceId);
//			}
//			if(fileTickerSymbol.isEmpty() == true){
//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase8, "No TickerSymbol ，PerformanceId is: " + filePerformanceId);
//			}
//			if(fileDomiceleOrCountryId.isEmpty() == true){
//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase9, "No DomiceleOrCountryId ，PerformanceId is: " + filePerformanceId);
//			}
//			if(filePrimaryExchangeId.isEmpty() == true){
//				CustomizedLog.writeCustomizedLogFile(testLogPath + testLogNameCase10, "No PrimaryExchangeId ，PerformanceId is: " + filePerformanceId);
//			}
		}

//		int lineRange = Helper.getTotalLinesOfFile(StockfilePath);
//		List<String> performanceIdList = new ArrayList<String>();
//		List<String> CUSIPList = new ArrayList<String>();
//		HashMap<String,String> CUSIP2PerformanceID = new HashMap<String,String>();
//		String performanceId = buildPerformanceId(7);
//		System.out.println(performanceId);
//DB端数据准备		
//		String sqlToGetCUSIP = "SELECT PerformanceId,CUSIP FROM dbo.PerformanceIdDimension WHERE PerformanceId IN (" + performanceId + ")";
//		CUSIP2PerformanceID = DBCommons.getDataMap(sqlToGetCUSIP, Database.Vertica1);	
//		CUSIPList = DBCommons.getDataList(sqlToGetCUSIP, Database.Vertica1);
//		for(int lineNum = 2;lineNum < 3;lineNum++){
//			String fileContent = Helper.readFileInLines(StockfilePath, lineNum);
//注意该方法的第二个参数，设置为16，表示正则模式将被应用15次
//			String[] element = fileContent.split("~",16);
//File端数据准备
//			String fileCUSIP = element[0];
//			String filePerformanceId = element[7];
//			System.out.println("CUSIP2PerformanceId Map: " + CUSIP2PerformanceID.get(filePerformanceId));
					
//		}	
		
	}
	public static void test1() throws Exception{
		HashMap<String,String> perfId2CUSIP = new HashMap<String,String>();
		String sql="SELECT PerformanceId,CUSIP FROM dbo.PerformanceIdDimension WHERE PerformanceId IN ('0P00000003','0P00000004','0P00000009','0P0000000B','0P0000000I','0P0000000J','0P0000000R','0P0000000S','0P0000000X','0P0000000Y','0P00000019','0P0000001A','0P0000001C','0P0000001I','0P0000001K','0P0000001P','0P0000001R','0P0000001S','0P0000001T','0P0000001Y','0P0000001Z')";
		perfId2CUSIP = DBCommons.getDataHashMap(sql, Database.Vertica1);
		System.out.println(perfId2CUSIP.isEmpty());
	}
	
	
	
	
	public static void main(String[] args) throws Exception {
		testPrepare();
//		testStockFileComplete();
//		testStockFileFormat();
		testStockFileContent();
//		testStockFileDuplicateData();
//		test();
//		test1();
	}
}

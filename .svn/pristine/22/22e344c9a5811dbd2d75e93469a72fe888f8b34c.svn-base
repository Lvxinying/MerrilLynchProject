package com.morningstar.FundAutoTest.commons;

import java.sql.Connection;  
import java.sql.SQLException;  
  
import javax.sql.DataSource;  
  
import com.mchange.v2.c3p0.ComboPooledDataSource;

public class DBFreshpool {

	/**C3P0 DBPool
	 * @author Stefan.Hou
	 */
	
	private static ComboPooledDataSource ds;  
	  
    private static ThreadLocal<Connection> tl = new ThreadLocal<Connection>(); 

//根据name自动识别配置完成初始化 
/*    static {
    	if(conn == null){
    		iniDbConfig("MsSql1");
    	}
    	if(conn == null){
    		iniDbConfig("MsSql2");
    	}
    	if(conn == null){
    		iniDbConfig("MsSql3");
    	}
    	if(conn == null){
    		iniDbConfig("MySql1");
    	}
    	if(conn == null){
    		iniDbConfig("MySql2");
    	}
    	if(conn == null){
    		iniDbConfig("MySql3");
    	}
    	if(conn == null){
    		iniDbConfig("Vertica1");
    	}
    	if(conn == null){
    		iniDbConfig("Vertica2");
    	}
    	if(conn == null){
    		iniDbConfig("Vertica3");
    	}
    }  
  */
    public static ComboPooledDataSource getDataSource() {  
        return ds;  
    }  

//初始化DB的配置    
    private static void iniDbConfig(String DbName){
//    	long startTime = System.nanoTime();
    	ds = new ComboPooledDataSource(DbName);
//    	long endTime = System.nanoTime() - startTime;
//    	System.out.println( DbName + " initialize finished, total cost [" + endTime / (1000 * 1000) + "]ms");
    }
    
    
    public static Connection getConnection(Database database) throws SQLException {
    	Connection conn = null;
    	switch(database){
//MsSQL    	
    	case MsSQL1:
    		conn = connectToMsSQL1();
    		break;
    	case MsSQL2:
    		conn = connectToMsSQL2();
    		break;
    	case MsSQL3:
    		conn = connectToMsSQL3();
    		break;
    	case MsSQL4:
    		conn = connectToMsSQL4();
    		break;
    	case MsSQL5:
    		conn = connectToMsSQL5();
    		break;
//MySQL    		
    	case MySQL1:
    		conn = connectToMySQL1();
    		break;
    	case MySQL2:
    		conn = connectToMySQL2();
    		break;
    	case MySQL3:
    		conn = connectToMySQL3();
    		break;
//Vertica    		
    	case Vertica1:
    		conn = connectToVertica1();
    		break;
    	case Vertica2:
    		conn = connectToVertica2();
    		break;
    	case Vertica3:
    		conn = connectToVertica3();
    		break;
    	}
    	return conn;
    }  
  
    public static void startTransaction() {  
        try {  
// 得到当前线程上绑定连接开启事务  
            Connection conn = tl.get();  
                conn = ds.getConnection();  
                tl.set(conn);  
//取消AutoCommit设置            
            conn.setAutoCommit(false);  
        } catch (Exception e) {  
            throw new RuntimeException(e);  
        }  
    }  
 
//commit之前的所有SQL语句    
    public static void commitTransaction() {  
        try {  
            Connection conn = tl.get();    
                conn.commit();   
        } catch (Exception e) {  
            throw new RuntimeException(e);  
        }  
    }  
  
    public static Connection closeConnection() {         
    	try {  
            Connection conn = tl.get();    
                conn.close();   
        } catch (Exception e) {  
            throw new RuntimeException(e);  
        } finally {  
// 千万注意，解除当前线程上绑定的链接（从threadlocal容器中移除对应当前线程的链接）           
        	tl.remove();   
        }
		return null;
    }
    
    
    
//连接数据库
//MsSQL    
    private static Connection connectToMsSQL1(){
        Connection connMsSQL1 = tl.get();  
    	try {
    			iniDbConfig("MsSql1");
            	connMsSQL1 = ds.getConnection();  
                tl.set(connMsSQL1);  
            return connMsSQL1;  
        } catch (Exception e) {  
            throw new RuntimeException(e);  
        }  
    }
    private static Connection connectToMsSQL2(){
        Connection connMsSQL2 = tl.get();  
    	try {
    			iniDbConfig("MsSql2");   
            	connMsSQL2 = ds.getConnection();  
                tl.set(connMsSQL2);   
            return connMsSQL2;  
        } catch (Exception e) {  
            throw new RuntimeException(e);  
        }  
    }
    private static Connection connectToMsSQL3(){
        Connection connMsSQL3 = tl.get();  
    	try {
    			iniDbConfig("MsSql3");    
            	connMsSQL3 = ds.getConnection();  
                tl.set(connMsSQL3);   
            return connMsSQL3;  
        } catch (Exception e) {  
            throw new RuntimeException(e);  
        }  
    }
    private static Connection connectToMsSQL4(){
        Connection connMsSQL4 = tl.get();  
    	try {
    			iniDbConfig("MsSql4");    
            	connMsSQL4 = ds.getConnection();  
                tl.set(connMsSQL4);  
            return connMsSQL4;  
        } catch (Exception e) {  
            throw new RuntimeException(e);  
        }  
    }
    private static Connection connectToMsSQL5(){
        Connection connMsSQL5 = tl.get();  
    	try {
    			iniDbConfig("MsSql5");   
            	connMsSQL5 = ds.getConnection();  
                tl.set(connMsSQL5);    
            return connMsSQL5;  
        } catch (Exception e) {  
            throw new RuntimeException(e);  
        }  
    }
//MySQL
    private static Connection connectToMySQL1(){
        // 得到当前线程上绑定的连接  
        Connection connMySQL1 = tl.get();
    	try {
    			iniDbConfig("MySQL1");
            	connMySQL1 = ds.getConnection();  
                tl.set(connMySQL1);   
            return connMySQL1;  
        } catch (Exception e) {  
            throw new RuntimeException(e);  
        }  
    }
    private static Connection connectToMySQL2(){
        // 得到当前线程上绑定的连接  
        Connection connMySQL2 = tl.get();
    	try {
    			iniDbConfig("MySQL2");  
            	connMySQL2 = ds.getConnection();  
                tl.set(connMySQL2);  
            return connMySQL2;  
        } catch (Exception e) {  
            throw new RuntimeException(e);  
        }  
    }
    private static Connection connectToMySQL3(){
        // 得到当前线程上绑定的连接  
        Connection connMySQL3 = tl.get();
    	try {
    			iniDbConfig("MySQL3"); 
            	connMySQL3 = ds.getConnection();  
                tl.set(connMySQL3);   
            return connMySQL3;  
        } catch (Exception e) {  
            throw new RuntimeException(e);  
        }  
    }
//Vertica
    private static Connection connectToVertica1(){
        // 得到当前线程上绑定的连接  
        Connection connVertica1 = tl.get();
    	try {  
    			iniDbConfig("Vertica1");
            	connVertica1 = ds.getConnection();  
                tl.set(connVertica1);   
            return connVertica1;  
        } catch (Exception e) {  
            throw new RuntimeException(e);  
        }  
    }
    private static Connection connectToVertica2(){
        // 得到当前线程上绑定的连接  
        Connection connVertica2 = tl.get();
    	try {  
    			iniDbConfig("Vertica2");
            	connVertica2 = ds.getConnection();  
                tl.set(connVertica2);   
            return connVertica2;  
        } catch (Exception e) {  
            throw new RuntimeException(e);  
        }  
    }
    private static Connection connectToVertica3(){
        // 得到当前线程上绑定的连接  
        Connection connVertica3 = tl.get();
    	try {  
    			iniDbConfig("Vertica3");  
            	connVertica3 = ds.getConnection();  
                tl.set(connVertica3);   
            return connVertica3;  
        } catch (Exception e) {  
            throw new RuntimeException(e);  
        }  
    }
}
